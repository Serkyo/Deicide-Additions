buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Create
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.ithundxr.dev/mirror" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
    // JEI
    maven { url = "https://maven.blamejared.com/" }
    // Curse Maven
    maven { url = "https://cursemaven.com" }
    // Geckolib
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    // ISS
    maven { url = "https://code.redspace.io/releases" }

    maven { url = "https://maven.enginehub.org/repo/" }
    // Player Animator
    maven { url = "https://maven.kosmx.dev/" }
    // Curios / Caelus
    maven { url = "https://maven.theillusivec4.top" }
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    // Mixins extras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")
    // Create
    implementation(fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false })
    implementation(fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}"))
    compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}"))
    runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"))
    implementation(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}"))
    // Create enchant industry
    implementation fg.deobf("curse.maven:create-enchantment-industry-${create_enchant_industry_version}")
    // ISS
    implementation fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}")
    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    // Born in chaos
    implementation(fg.deobf("curse.maven:born-in-chaos-${born_in_chaos_version}"))
    // Farmer's delight
    implementation fg.deobf("curse.maven:farmers-delight-${farmers_delight_version}")
    // Sculk Horde
    implementation fg.deobf("curse.maven:sculk-horde-${sculk_horde_version}")
    // LSO
    implementation fg.deobf("curse.maven:legendary-survival-overhaul-${lso_version}")
    // Geckolib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    implementation("com.eliotlash.mclib:mclib:20")
    // Caelus
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    // Player Animator
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")
    // Curios
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    // Questlog
    implementation fg.deobf("curse.maven:questlog-${questlog_version}")
    // Legendary tabs
    implementation fg.deobf("curse.maven:legendary-tabs-${legendarytabs_version}")
    // Autoleveling
    implementation fg.deobf("curse.maven:auto-leveling-${autoleveling_version}")
    // Projectile Damage Attribute
    implementation fg.deobf("curse.maven:projectile-damage-attribute-${projectile_damage_version}")
    // FTB Teams
    implementation fg.deobf("curse.maven:ftb-teams-forge-${ftbteams_version}")
    // Architectury API
    implementation fg.deobf("curse.maven:architectury-api-${architectury_version}")
    // FTB Library
    runtimeOnly fg.deobf("curse.maven:ftb-library-forge-${ftblibrary_version}")
    // Diet
    implementation fg.deobf("curse.maven:diet-${diet_version}")
    // Cosmetic Armors Reworked
    compileOnly fg.deobf("curse.maven:cosmetic-armor-reworked-${car_version}")
    // Apotheosis
    implementation fg.deobf("curse.maven:apotheosis-${apotheosis_version}")
    // Placebo
    runtimeOnly fg.deobf("curse.maven:placebo-${placebo_version}")
    // Apothic Attributes
    runtimeOnly fg.deobf("curse.maven:apothic-attributes-${attributeslib_version}")
    // Mofu Better End
    implementation fg.deobf("curse.maven:mofus-broken-constellation-${mofu_version}")
    // Ice and fire
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-${iaf_version}")
    // Citadel
    runtimeOnly fg.deobf("curse.maven:citadel-${citadel_version}")
    // Ice and fire Spellbooks
    implementation fg.deobf("curse.maven:ice-and-fire-spellbooks-${iaf_spellbooks_version}")
    // Sophisticated Backpacks
    implementation fg.deobf("curse.maven:sophisticated-backpacks-${soph_backpacks_version}")
    // Sophisticated Core
    runtimeOnly fg.deobf("curse.maven:sophisticated-core-${soph_core_version}")
    // Puffish
    implementation fg.deobf("curse.maven:puffish-skills-${puffish_skills_version}")
    // Goety
    implementation fg.deobf("curse.maven:goety-${goety_version}")
    // Dungeon now loading
    implementation fg.deobf("curse.maven:dungeon-now-loading-${dnl_version}")
}

mixin {
    add sourceSets.main, 'deicideadditions.refmap.json'
    config 'mixins.deicideadditions.json'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
